name: 'ecs-cd'
description: 'Deploy docker image to ECS'
inputs:
  ecr-repo:
    description: "ECR Repository"
    required: true
  ecs-cluster:
    description: "ECS Cluster"
    required: true
  ecs-service:
    description: "ECS Service"
    required: true
  task-definition:
    description: "ECS Service task definition"
    required: true
  aws-access-key-id:
    description: "AWS Access Key Id"
    required: true
  aws-secret-access-key:
    description: "AWS Secret Access Key"
    required: true
  aws-region:
    description: "AWS Region"
    required: true
  dockerfile:
    description: "Dockerfile"
    required: false
    default: "./Dockerfile"
  build-path:
    description: "Docker build path"
    required: false
    default: "."

runs:
  using: "composite"
  steps:       
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, to Amazon ECR
      shell: bash
      run: |
        docker-compose -f docker/docker-compose.local.yml build
    
    - name: push image to Amazon ECR
      id: build-image
      env: 
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ecr-repo }}
        TAG: ${{ github.sha }}
      shell: bash
      run: |
        docker image ls
        docker tag docker_spica-server:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker-compose -f docker/docker-compose.local.yml push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$TAG"

    # - name: Build, tag, and push image to Amazon ECR
    #   id: build-image
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     ECR_REPOSITORY: ${{ inputs.ecr-repo }}
    #     TAG: ${{ github.sha }}
    #   shell: bash
    #   run: |
    #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$TAG -f ${{ inputs.dockerfile }} ${{ inputs.build-path }}
    #     docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$TAG
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    #     echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$TAG"
    
    - name: Download task definition
      shell: bash
      run: |
        aws ecs describe-task-definition \
        --task-definition ${{ inputs.task-definition }} \
        --query taskDefinition > task-definition.json
    - name: Get container name
      id: container-name
      shell: bash
      run: |
        NAME=$(aws ecs describe-task-definition \
        --task-definition ${{ inputs.task-definition }} \
        --query taskDefinition.containerDefinitions[0].name --output text)
        echo "::set-output name=name::$NAME"
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ steps.container-name.outputs.name }}
        image: ${{ steps.build-image.outputs.image }}

    # https://github.com/aws-actions/amazon-ecs-deploy-task-definition/issues/176
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ inputs.ecs-service }}
        cluster: ${{ inputs.ecs-cluster }}
        wait-for-service-stability: false
